---
linters:
  disable-all: true
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - contextcheck
    - cyclop
    - decorder
    - depguard
    - dogsled
    - dupl
    - durationcheck
    - errcheck
    - errchkjson
    - errname
    - errorlint
    - execinquery
    - exhaustive
    - exportloopref
    - forbidigo
    - forcetypeassert
    - funlen
    - gci
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - godox
    - goerr113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    - gomnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - grouper
    - importas
    - ineffassign
    - maintidx
    - makezero
    - misspell
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - noctx
    - nolintlint
    - nonamedreturns
    - nosprintfhostport
    - prealloc
    - predeclared
    - promlinter
    - revive
    - rowserrcheck
    - sqlclosecheck
    - staticcheck
    - stylecheck
    - tagliatelle
    - tenv
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - wastedassign
    - whitespace
    - wrapcheck

    # I'd like to be able to use these, but we need to rework some code
    # - gochecknoglobals
    # - paralleltest
    # - testpackage

  don't enable:
    - exhaustruct  # we don't want to define every attribute
    - ireturn  # returning an interface is useful
    - lll  # we do this ourselves
    - nlreturn  # don't want this
    - varnamelen  # too many exceptions
    - wsl  # don't want this

linters-settings:
  dupl:
    threshold: 60
  funlen:
    lines: 50
    statements: 35
  goconst:
    min-len: 2
    min-occurrences: 2
    match-constant: true
    numbers: true
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    settings:
      hugeParam:
        sizeThreshold: 25
  gocyclo:
    min-complexity: 10
  godox:
    keywords:  # default keywords are TODO, BUG, and FIXME
      - BUG
      - FIXME
      - HACK
  gofumpt:
    lang-version: "1.19"
    extra-rules: true
  gosimple:
    go: "1.19"
    checks:  # https://staticcheck.io/docs/options#checks
      - all
  govet:
    check-shadowing: true
    enable-all: true
    disable:
      - fieldalignment
  grouper:
    import-require-single-import: true
  maintidx:
    # Show functions with maintainability index lower than N.
    # A high index indicates better maintainability.
    # Default: 20
    under: 40
  misspell:
    locale: UK
    ignore-words:
      - importas
  nestif:
    min-complexity: 6
  nolintlint:
    # report any unused nolint directives
    allow-unused: false
    # require an explanation for nolint directives
    require-explanation: true
    # require nolint directives to be specific
    #   about which linter is being skipped
    require-specific: true
  promlinter:
    strict: true
  tagliatelle:
    case:
      use-field-name: false
      rules:
        json: snake
issues:
  exclude-rules:
    - path: cmd/*  # allow commands to use Printf/Println
      linters: [ forbidigo ]
    # TODO - remove this when possible
    - path: internal/api/action/(action|invitation|notification).go
      text: comment
      linters: [ revive, stylecheck ]
    - path: internal/api/expr/(attrdemo|compute|expr|insight).go
      text: comment
      linters: [ revive, stylecheck ]
    - path: internal/api/(middleware|router|rule-validator|rules).go
      text: comment
      linters: [ revive, stylecheck ]
    - path: internal/httpcontext/httpcontext.go
      text: comment
      linters: [ revive, stylecheck ]
    - path: internal/core/(config|const|init|logger).go
      text: comment
      linters: [ revive, stylecheck ]
    - path: internal/engine/engine.go
      text: comment
      linters: [ revive, stylecheck ]
    - path: internal/rule/(deletedata|updatedata).go
      text: comment
      linters: [ revive, stylecheck ]
    - path: internal/testutils/(context|httpserver|time).go
      text: comment
      linters: [ revive, stylecheck ]
    - path: internal/testutils/suite/(shorthands|suite).go
      text: comment
      linters: [ revive, stylecheck ]
  exclude-use-default: false
  exclude:
    - declaration of "err" shadows declaration at

    # TODO - try to remove as many of these as possible
    # list taken from "golangci-lint run --help"

    # EXC0001 errcheck: Almost all programs ignore errors on these functions
    # and in most cases it's ok
    # - >-
    #   Error return value of
    #   .((os\.)?std(out|err)\..*|.*Close|.*Flush|
    #     os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv).
    #   is not checked
    - Error return value of .(.*Close|os\.Setenv). is not checked

    # EXC0002 golint: Annoying issue about not having a comment. The rare
    # codebase has such comments
    # - >-
    #   (comment on exported (method|function|type|const)|should
    #   have( a package)? comment|comment should be of the form)

    # EXC0003 golint: False positive when tests are defined in package 'test'
    # - >-
    #   func name will be used as test\.Test.* by other packages,
    #   and that stutters; consider calling this

    # EXC0004 govet: Common false positives
    # - (possible misuse of unsafe.Pointer|should have signature)

    # EXC0005 staticcheck: Developers tend to write in C-style with an explicit
    # 'break' in a 'switch', so it's ok to ignore
    # - ineffective break statement. Did you mean to break out of the outer loop

    # EXC0006 gosec: Too many false-positives on 'unsafe' usage
    # - Use of unsafe calls should be audited

    # EXC0007 gosec: Too many false-positives for parametrized shell calls
    # - Subprocess launch(ed with variable|ing should be audited)
    - Subprocess launched with variable

    # EXC0008 gosec: Duplicated errcheck checks
    # - (G104|G307)
    - G104

    # EXC0009 gosec: Too many issues in popular repos
    # - >-
    #   (Expect directory permissions to be 0750 or
    #   less|Expect file permissions to be 0600 or less)

    # EXC0010 gosec: False positive is triggered by 'src, err :=
    # ioutil.ReadFile(filename)'
    - Potential file inclusion via variable

    # EXC0011 stylecheck: Annoying issue about not having a comment. The rare
    # codebase has such comments
    # - >-
    #   (comment on exported (method|function|type|const)|should
    #   have( a package)? comment|comment should be of the form)

    # EXC0012 revive: Annoying issue about not having a comment. The rare
    # codebase has such comments
    # - >-
    #   exported (.+) should have comment( \(or a comment on this block\))?
    #   or be unexported

    # EXC0013 revive: Annoying issue about not having a comment. The rare
    # codebase has such comments
    # - package comment should be of the form "(.+)...

    # EXC0014 revive: Annoying issue about not having a comment. The rare
    # codebase has such comments
    # - comment on exported (.+) should be of the form "(.+)..."

    # EXC0015 revive: Annoying issue about not having a comment. The rare
    # codebase has such comments
    # - >-
    #   should have a package comment,
    #   unless it's in another file for this package

# run:
#   skip-dirs:
#     - test/testdata_etc
