// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/services.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	internal "RD-Clone-API/pkg/internal"
	errors "RD-Clone-API/pkg/util/errors"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserService) Get(arg0 context.Context, arg1 string) (*internal.UserResponse, errors.CommonError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*internal.UserResponse)
	ret1, _ := ret[1].(errors.CommonError)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserService)(nil).Get), arg0, arg1)
}

// Login mocks base method.
func (m *MockUserService) Login(arg0 context.Context, arg1 *internal.LoginRequest) (*internal.LoginResponse, errors.CommonError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*internal.LoginResponse)
	ret1, _ := ret[1].(errors.CommonError)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), arg0, arg1)
}

// RefreshToken mocks base method.
func (m *MockUserService) RefreshToken(ctx context.Context, request *internal.RefreshTokenRequest) (*internal.RefreshTokenResponse, errors.CommonError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, request)
	ret0, _ := ret[0].(*internal.RefreshTokenResponse)
	ret1, _ := ret[1].(errors.CommonError)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockUserServiceMockRecorder) RefreshToken(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockUserService)(nil).RefreshToken), ctx, request)
}

// SignUp mocks base method.
func (m *MockUserService) SignUp(arg0 context.Context, arg1 *internal.RegisterRequest) (*internal.RegisterResponse, errors.CommonError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(*internal.RegisterResponse)
	ret1, _ := ret[1].(errors.CommonError)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserServiceMockRecorder) SignUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserService)(nil).SignUp), arg0, arg1)
}

// VerifyAccount mocks base method.
func (m *MockUserService) VerifyAccount(arg0 context.Context, arg1 string) errors.CommonError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccount", arg0, arg1)
	ret0, _ := ret[0].(errors.CommonError)
	return ret0
}

// VerifyAccount indicates an expected call of VerifyAccount.
func (mr *MockUserServiceMockRecorder) VerifyAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccount", reflect.TypeOf((*MockUserService)(nil).VerifyAccount), arg0, arg1)
}

// MockRefreshTokenService is a mock of RefreshTokenService interface.
type MockRefreshTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenServiceMockRecorder
}

// MockRefreshTokenServiceMockRecorder is the mock recorder for MockRefreshTokenService.
type MockRefreshTokenServiceMockRecorder struct {
	mock *MockRefreshTokenService
}

// NewMockRefreshTokenService creates a new mock instance.
func NewMockRefreshTokenService(ctrl *gomock.Controller) *MockRefreshTokenService {
	mock := &MockRefreshTokenService{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenService) EXPECT() *MockRefreshTokenServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRefreshTokenService) Create(arg0 context.Context) (string, errors.CommonError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(errors.CommonError)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRefreshTokenServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRefreshTokenService)(nil).Create), arg0)
}

// Validate mocks base method.
func (m *MockRefreshTokenService) Validate(arg0 context.Context, arg1 string) errors.CommonError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(errors.CommonError)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockRefreshTokenServiceMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockRefreshTokenService)(nil).Validate), arg0, arg1)
}

// MockSubredditService is a mock of SubredditService interface.
type MockSubredditService struct {
	ctrl     *gomock.Controller
	recorder *MockSubredditServiceMockRecorder
}

// MockSubredditServiceMockRecorder is the mock recorder for MockSubredditService.
type MockSubredditServiceMockRecorder struct {
	mock *MockSubredditService
}

// NewMockSubredditService creates a new mock instance.
func NewMockSubredditService(ctrl *gomock.Controller) *MockSubredditService {
	mock := &MockSubredditService{ctrl: ctrl}
	mock.recorder = &MockSubredditServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubredditService) EXPECT() *MockSubredditServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubredditService) Create(arg0 context.Context, arg1 *internal.NewSubreddit, arg2 string) (*internal.SubredditResponse, errors.CommonError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*internal.SubredditResponse)
	ret1, _ := ret[1].(errors.CommonError)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubredditServiceMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubredditService)(nil).Create), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockSubredditService) Get(arg0 context.Context, arg1 int) (*internal.SubredditResponse, errors.CommonError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*internal.SubredditResponse)
	ret1, _ := ret[1].(errors.CommonError)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubredditServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubredditService)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockSubredditService) GetAll(arg0 context.Context) ([]*internal.SubredditResponse, errors.CommonError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*internal.SubredditResponse)
	ret1, _ := ret[1].(errors.CommonError)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubredditServiceMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubredditService)(nil).GetAll), arg0)
}
